// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/quanergyO/sigma_evolution/types"
)

// MockIBooks is a mock of IBooks interface.
type MockIBooks struct {
	ctrl     *gomock.Controller
	recorder *MockIBooksMockRecorder
}

// MockIBooksMockRecorder is the mock recorder for MockIBooks.
type MockIBooksMockRecorder struct {
	mock *MockIBooks
}

// NewMockIBooks creates a new mock instance.
func NewMockIBooks(ctrl *gomock.Controller) *MockIBooks {
	mock := &MockIBooks{ctrl: ctrl}
	mock.recorder = &MockIBooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBooks) EXPECT() *MockIBooksMockRecorder {
	return m.recorder
}

// MockIPlayLists is a mock of IPlayLists interface.
type MockIPlayLists struct {
	ctrl     *gomock.Controller
	recorder *MockIPlayListsMockRecorder
}

// MockIPlayListsMockRecorder is the mock recorder for MockIPlayLists.
type MockIPlayListsMockRecorder struct {
	mock *MockIPlayLists
}

// NewMockIPlayLists creates a new mock instance.
func NewMockIPlayLists(ctrl *gomock.Controller) *MockIPlayLists {
	mock := &MockIPlayLists{ctrl: ctrl}
	mock.recorder = &MockIPlayListsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPlayLists) EXPECT() *MockIPlayListsMockRecorder {
	return m.recorder
}

// MockICourses is a mock of ICourses interface.
type MockICourses struct {
	ctrl     *gomock.Controller
	recorder *MockICoursesMockRecorder
}

// MockICoursesMockRecorder is the mock recorder for MockICourses.
type MockICoursesMockRecorder struct {
	mock *MockICourses
}

// NewMockICourses creates a new mock instance.
func NewMockICourses(ctrl *gomock.Controller) *MockICourses {
	mock := &MockICourses{ctrl: ctrl}
	mock.recorder = &MockICoursesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICourses) EXPECT() *MockICoursesMockRecorder {
	return m.recorder
}

// MockISchool21Project is a mock of ISchool21Project interface.
type MockISchool21Project struct {
	ctrl     *gomock.Controller
	recorder *MockISchool21ProjectMockRecorder
}

// MockISchool21ProjectMockRecorder is the mock recorder for MockISchool21Project.
type MockISchool21ProjectMockRecorder struct {
	mock *MockISchool21Project
}

// NewMockISchool21Project creates a new mock instance.
func NewMockISchool21Project(ctrl *gomock.Controller) *MockISchool21Project {
	mock := &MockISchool21Project{ctrl: ctrl}
	mock.recorder = &MockISchool21ProjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISchool21Project) EXPECT() *MockISchool21ProjectMockRecorder {
	return m.recorder
}

// MockISkils is a mock of ISkils interface.
type MockISkils struct {
	ctrl     *gomock.Controller
	recorder *MockISkilsMockRecorder
}

// MockISkilsMockRecorder is the mock recorder for MockISkils.
type MockISkilsMockRecorder struct {
	mock *MockISkils
}

// NewMockISkils creates a new mock instance.
func NewMockISkils(ctrl *gomock.Controller) *MockISkils {
	mock := &MockISkils{ctrl: ctrl}
	mock.recorder = &MockISkilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISkils) EXPECT() *MockISkilsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISkils) Create(skill types.Skill) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", skill)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockISkilsMockRecorder) Create(skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISkils)(nil).Create), skill)
}

// Delete mocks base method.
func (m *MockISkils) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockISkilsMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockISkils)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockISkils) GetAll() ([]types.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]types.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockISkilsMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockISkils)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockISkils) GetById(id int) (types.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(types.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockISkilsMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockISkils)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockISkils) Update(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockISkilsMockRecorder) Update(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockISkils)(nil).Update), id)
}
